var FileUploadHandler = require('model.FileUploadHandler')
var UrlUploadHandler = require('model.UrlUploadHandler')
var DeleteFileHandler = require('model.DeleteFileHandler')
var AddToAlbumHandler = require('model.AddToAlbumHandler')
var CreateAlbumHandler = require('model.CreateAlbumHandler')
var DeleteAlbumHandler = require('model.DeleteAlbumHandler')
var RemoveFromAlbumHandier = require('model.RemoveFromAlbumHandler')
var EditAlbumHandler = require("model.EditAlbumHandler")
var Config = require('Config')


class ArgHandler()

    record ArgOptions(flag,descr,func) endRec

    function getUserHash()
        if Config.ignoreHash then return "" end
        return Config.userHash or ""
    end

    function searchForArg(regex,args)
        var ending = args:match(regex .. "$")
        var middle = args:match(regex .. ";;;")
        return middle or ending or ""
    end

    function findArg(regex,regex2,args)
        var match1 = searchForArg(regex,args)
        if match1 ~= "" then return match1 end
        return searchForArg(regex2,args)
    end

    var findFiles = (args) -> findArg(";;;%-f;;;(.-)",";;;%-f(.-)",args) .. ";;;"

    function findHash(args)
        if findArg(";;;%-ih",";;;-ih;;;",args) ~= "" then return "" end
        var hash = findArg(";;;%-h;;;(.-)",";;;-h(.-)",args)
        if hash == "" then return getUserHash() end
        return hash
    end

    var findShort = (args) -> findArg(";;;%-s;;;(.-)",";;;-s(.-)",args)

    function handleRequest(args,klass)
        var hash = findHash(args)
        var files = findFiles(args)
        return klass:new(files,hash)
    end

    var fileUploadHandler = (args) -> handleRequest(args,FileUploadHandler)

    var urlUploadHandler = (args) -> handleRequest(args,UrlUploadHandler)

    var deleteFiles = (args) -> handleRequest(args,DeleteFileHandler)

    function findHashFiles(args)
        var hash = findHash(args)
        var files = findFiles(args)
        return hash,files
    end

    function findHashFilesShort(args)
        var hash,files = findHashFiles(args)
        var short = findShort(args)
        return hash,files,short
    end

    function addToAlbum(args)
        var hash,files,short = findHashFilesShort(args)
        return AddToAlbumHandler:new(files,hash,short)
    end

    function deleteAlbum(args)
        var hash = findHash(args)
        var short = findShort(args)
        return DeleteAlbumHandler:new(hash,short)
    end

    var findTitle = (args) -> findArg(";;;%-t;;;(.-)",";;;%-t(.-)",args)

    var findDesc = (args) -> findArg(";;;%-d;;;(.-)",";;;%-d(.-)",args)

    function createAlbum(args)
        var hash,files = findHashFiles(args)
        var title = findTitle(args)
        var desc = findDesc(args)
        return CreateAlbumHandler:new(files,hash,title,desc)
    end

    function removeFromAlbum(args)
        var hash,files = findHashFiles(args)
        var short = findShort(args)
        return RemoveFromAlbumHandier:new(files,hash,short)
    end

    function editAlbum(args)
        var hash,files = findHashFiles(args)
        var short = findShort(args)
        var title = findTitle(args)
        var desc = findDesc(args)
        return EditAlbumHandler:new(files,hash,short,title,desc)
    end

    var printHelp <mutable> = ""

    var requestOptions = {
        ['fu'] = ArgOptions("-fu","upload a file to catbox. [-h userhash][-ih] -f file(s)",fileUploadHandler),
        ['uu'] = ArgOptions("-uu", "upload a file from url to catbox. [-h userhash][-ih] -f url(s)",urlUploadHandler),
        ['df'] = ArgOptions("-df","delete file(s) from catbox. [-h userhash][-ih] -f file(s)",deleteFiles),
        ['aa'] = ArgOptions("-aa","add file(s) to album on catbox. [-h userhash] -s short -f file(s)",addToAlbum),
        ['ca'] = ArgOptions('-ca',"create album on catbox. [-h userhash] -t title -d desc -f file(s)",createAlbum),
        ['da'] = ArgOptions("-da","delete an album on catbox. [-h userhash] -s short",deleteAlbum),
        ['ra'] = ArgOptions("-ra","remove file(s) from an album on catbox. [-h userhash] -s short -f file(s)",removeFromAlbum),
        ['ea'] = ArgOptions("-ea","edit album on catbox. [-h userhash] -s short -t title -d description -f file(s)",editAlbum),
        ['h'] = ArgOptions("-h","print help message",printHelp)
    }

    var flagOptions = {
       ['-h'] = ArgOptions("-h","userhash. can be provided as an argument or set in Config.dys"),
       ['-ih'] = ArgOptions("-ih","ignore hash.  ignores -h and also userhash field in Config.dys. can be set in Config.dys"),
       ['-s'] = ArgOptions("-s","short. the 6 alphanumeric character in the generate url for an album."),
       ['-f'] = ArgOptions("-f","file(s). list of file(s) to upload. with the -uu -f is the list of url(s) to upload from."),
       ['-t'] = ArgOptions("-t","title"),
       ['-d'] = ArgOptions("-d","description")
    }

    function printTable(tbl)
        for _,v in pairs(tbl) do
            io.write("\t",v.flag,"\t",v.desc,"\n")
        end
    end

    printHelp = function()
        io.write("Jellybean: a cli tool for using the api for catbox.moe:\n")
        io.write("jellybean [request] [flag(s)]\n")
        io.write("note: request must be first argument.\nrequest:\n")
        printTable(requestOptions)
        io.write("flags:\n")
        printTable(flagOptions)
        os.exit(75)
    end

    function requestError()
        io.stderr:write("error: incorrect arguments\n")
        printHelp()
    end


    static method handleArgs(args)
       var argStr = table.concat(args,";;;")
       var request = argStr:match("%-(..)")
       if not request or not requestOptions[request] then
            return requestError()
       end
       return requestOptions[request].func(argStr)
    end

endClass

